{"version":3,"file":"static/js/168.39f05650.chunk.js","mappings":"qQAsEA,EA9DmB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACpB,GAAuCC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,SAA5DC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,kBACXC,GAAWC,EAAAA,EAAAA,MAEjBC,EAAAA,WAAgB,WACdF,GAASG,EAAAA,EAAAA,IAAiBT,MACzB,CAACM,EAAUN,IAEd,MAAoCQ,EAAAA,SAAe,CACjDR,OAAQK,EAAkBK,GAAKL,EAAkBK,GAAKV,EACtDW,OAAQN,EAAkBM,OAASN,EAAkBM,OAAS,GAC9DC,MAAOP,EAAkBO,MAAQP,EAAkBO,MAAQ,GAC3DC,QAASR,EAAkBS,KAAOT,EAAkBS,KAAO,KAJ7D,eAAOC,EAAP,KAAmBC,EAAnB,KAOQL,EAAmCM,EAAAA,GAAAA,OAA3BL,EAA2BK,EAAAA,GAAAA,MAApBJ,EAAoBI,EAAAA,GAAAA,QAAXC,EAAWD,EAAAA,GAAAA,OAErCE,EAAe,SAACC,GACpBJ,GAAc,SAACK,GAAD,eAAC,UACVA,GADS,cAEXD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,YAQtC,OACE,4BACIpB,IAAW,SAACqB,EAAA,EAAD,CAAQC,OAAQ,OAAQC,MAAO,OAAQC,MAAO,UAC3D,4BACE,kBAAOC,QAAQ,SAAf,SAAyBlB,KACzB,kBACEmB,KAAK,OACLP,KAAK,SACLC,MAAOT,EAAWJ,OAClBoB,SAAUZ,KAEZ,kBAAOU,QAAQ,QAAf,SAAwBjB,KACxB,kBACEkB,KAAK,OACLP,KAAK,QACLC,MAAOT,EAAWH,MAClBmB,SAAUZ,KAEZ,kBAAOU,QAAQ,UAAf,SAA0BhB,KAC1B,qBACEU,KAAK,UACLC,MAAOT,EAAWF,QAClBkB,SAAUZ,EACVa,KAAK,IACLC,KAAK,QAEP,mBAAQC,QA/BM,SAACd,GACnBA,EAAMe,iBACN7B,GAAS8B,EAAAA,EAAAA,IAAoBrB,KA6BKe,KAAK,SAAnC,SACGZ,WCvBX,EAjCiB,WACf,IAAQlB,GAAWqC,EAAAA,EAAAA,MAAXrC,OACR,GAAuCC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,SAA5DC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,kBACXC,GAAWC,EAAAA,EAAAA,MAEjBC,EAAAA,WAAgB,WACdF,GAASG,EAAAA,EAAAA,IAAiBT,MACzB,CAACM,EAAUN,IAEd,MAA+CQ,EAAAA,UAAe,GAA9D,eAAO8B,EAAP,KAAyBC,EAAzB,KAEA,OACE,4BACInC,IAAW,SAACqB,EAAA,EAAD,CAAQC,OAAQ,OAAQC,MAAO,OAAQC,MAAO,SAC1DxB,IAAYkC,IACX,UAAC,WAAD,YACE,wBAAKjC,EAAkBK,MACvB,wBAAKL,EAAkBO,SACvB,uBAAIP,EAAkBS,QACtB,mBACEoB,QAAS,WACPK,GAAmB,IAFvB,qBASHnC,GAAWkC,IAAoB,SAAC,EAAD,CAAYtC,OAAQA","sources":["views/pages/UpdatePost/index.js","views/pages/ViewPost/index.js"],"sourcesContent":["import React from 'react';\nimport Loader from '../../components/Loader/index';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { updatePostByIdThunk } from 'services/features/posts/operations';\nimport { formUtils } from 'views/utils/constants';\nimport { retrievePostById } from 'services/features/posts/actions';\n\nconst UpdatePost = ({ postId }) => {\n  const { loading, retrievedPostById } = useSelector((state) => state.posts);\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    dispatch(retrievePostById(postId));\n  }, [dispatch, postId]);\n\n  const [postValues, setPostValues] = React.useState({\n    postId: retrievedPostById.id ? retrievedPostById.id : postId,\n    userId: retrievedPostById.userId ? retrievedPostById.userId : '',\n    title: retrievedPostById.title ? retrievedPostById.title : '',\n    article: retrievedPostById.body ? retrievedPostById.body : '',\n  });\n\n  const { userId, title, article, submit } = formUtils;\n\n  const handleChange = (event) => {\n    setPostValues((prevValues) => ({\n      ...prevValues,\n      [event.target.name]: event.target.value,\n    }));\n  };\n  const handleClick = (event) => {\n    event.preventDefault();\n    dispatch(updatePostByIdThunk(postValues));\n  };\n\n  return (\n    <div>\n      {!loading && <Loader height={'2rem'} width={'2rem'} color={'pink'} />}\n      <div>\n        <label htmlFor=\"userId\">{userId}</label>\n        <input\n          type=\"text\"\n          name=\"userId\"\n          value={postValues.userId}\n          onChange={handleChange}\n        />\n        <label htmlFor=\"title\">{title}</label>\n        <input\n          type=\"text\"\n          name=\"title\"\n          value={postValues.title}\n          onChange={handleChange}\n        />\n        <label htmlFor=\"article\">{article}</label>\n        <textarea\n          name=\"article\"\n          value={postValues.article}\n          onChange={handleChange}\n          rows=\"4\"\n          cols=\"50\"\n        />\n        <button onClick={handleClick} type=\"submit\">\n          {submit}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default UpdatePost;\n","import React from 'react';\nimport { retrievePostById } from 'services/features/posts/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loader from '../../components/Loader/index';\nimport { useParams } from 'react-router-dom';\nimport UpdatePost from '../UpdatePost';\n\nconst ViewPost = () => {\n  const { postId } = useParams();\n  const { loading, retrievedPostById } = useSelector((state) => state.posts);\n  const dispatch = useDispatch();\n\n  React.useEffect(() => {\n    dispatch(retrievePostById(postId));\n  }, [dispatch, postId]);\n\n  const [updatePageStatus, setUpdatePageState] = React.useState(false);\n\n  return (\n    <div>\n      {!loading && <Loader height={'2rem'} width={'2rem'} color={'pink'} />}\n      {loading && !updatePageStatus && (\n        <React.Fragment>\n          <h2>{retrievedPostById.id}</h2>\n          <h3>{retrievedPostById.title}</h3>\n          <p>{retrievedPostById.body}</p>\n          <button\n            onClick={() => {\n              setUpdatePageState(true);\n            }}\n          >\n            Edit\n          </button>\n        </React.Fragment>\n      )}\n      {loading && updatePageStatus && <UpdatePost postId={postId} />}\n    </div>\n  );\n};\n\nexport default ViewPost;\n"],"names":["postId","useSelector","state","posts","loading","retrievedPostById","dispatch","useDispatch","React","retrievePostById","id","userId","title","article","body","postValues","setPostValues","formUtils","submit","handleChange","event","prevValues","target","name","value","Loader","height","width","color","htmlFor","type","onChange","rows","cols","onClick","preventDefault","updatePostByIdThunk","useParams","updatePageStatus","setUpdatePageState"],"sourceRoot":""}